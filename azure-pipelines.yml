

trigger:
- master

pool:
  name: localPool

variables:
  SONARQUBE_PROJECT_KEY: 'Art_Marketplace_Art_Marketplace_c6b13971-365e-45d9-98e2-18005c410f18' 
  SONARQUBE_SERVICE_CONNECTION: 'My_SonarQube'  
  FEED_NAME: 'my-artifact-feed' 
  PACKAGE_NAME: 'art-market'  
  NODE_ENV: 'production'
  PACKAGE_VERSION: '$(Build.BuildId)' 


steps:
# Step 1: install Node.js
- task: NodeTool@0
  inputs:
    versionSpec: '20.x'
  displayName: 'Install Node.js'



# Step 2: prepare SonarQube analysis
- task: SonarQubePrepare@5
  inputs:
    SonarQube: '$(SONARQUBE_SERVICE_CONNECTION)'
    scannerMode: 'CLI'
    configMode: 'manual'
    cliProjectKey: '$(SONARQUBE_PROJECT_KEY)'
    cliSources: '.' 
    extraProperties: |
      sonar.exclusions=**/node_modules/**,**/*.spec.ts  # exclude some folders/files
      sonar.typescript.lcov.reportPaths=coverage/lcov.info  

# Step 3: install dependencies and build nd test in angular project
- script: |
    npm install -g @angular/cli
    cd ArtMarket
    npm install
    ng build --prod
    npm run test 
  displayName: 'npm install and build and testing'

# Step: Run Dependency Vulnerability Check with npm audit
- script: |
    cd ArtMarket
    npm install
    npm audit --audit-level=high
  displayName: 'Dependency Vulnerability Check with npm audit'

# Step 4: publish test results
- task: PublishTestResults@2
  inputs:
    testResultsFiles: './ArtMarket/coverage/test-results/junit.xml'
    failTaskOnFailedTests: true
  displayName: 'Publish Test Results'

# Step 5: publish code coverage
- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: './ArtMarket/coverage/lcov.info'
  displayName: 'Publish Code Coverage Results'

  # Step 6: run SonarQube analysis
- task: SonarQubeAnalyze@5
  displayName: 'Run SonarQube analysis'

# Step 7: publish SonarQube quality gate results
- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'
  displayName: 'Publish SonarQube quality gate results'

#step 8: package project
- script: |
    cd ArtMarket
    npm version --no-git-tag-version 1.0.$(Build.BuildId)
    npm pack
  displayName: 'Package project'


#step 9: login to docker hub
- task: Docker@2
  inputs:
    containerRegistry: 'docker.io'
    command: 'login'
  displayName: 'Login to Docker Hub'

# Step 10: build and push Docker image
- task: Docker@2
  inputs:
    containerRegistry: 'docker.io'
    repository: 'ibtihel2001/nodeproject'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
  displayName: 'Build and push Docker image'

# Step 11: security Scan Docker Image
#- task: Docker@2
#  inputs:
#    containerRegistry: 'docker.io'
#    repository: 'ibtihel2001/nodeproject'
#    command: 'run'
#    arguments: 'docker scan ibtihel2001/nodeproject:latest --file **/Dockerfile'
#  displayName: 'Scan Docker Image for Vulnerabilities'
# Step 3: Push Docker Image to Docker Hub

# Step 11: Security Scan Docker Image using Trivy
- task: PowerShell@2
  displayName: 'Scan Docker Image for Vulnerabilities with Trivy'
  inputs:
    targetType: 'inline'
    script: |
      # Define variables
      $trivyVersion = "0.58.2"
      $trivyUrl = "https://github.com/aquasecurity/trivy/releases/download/v$trivyVersion/trivy_$trivyVersion_windows-64bit.zip"
      $outputPath = "$(Build.ArtifactStagingDirectory)\trivy.zip"
      $trivyExtractPath = "$(Build.ArtifactStagingDirectory)\trivy"

      # Download Trivy
      Write-Host "Downloading Trivy..."
      Invoke-WebRequest -Uri $trivyUrl -OutFile $outputPath -UseBasicParsing

      # Extract Trivy
      Write-Host "Extracting Trivy..."
      Expand-Archive -Path $outputPath -DestinationPath $trivyExtractPath -Force

      # Add Trivy to PATH
      Write-Host "Adding Trivy to PATH..."
      $env:Path += ";$trivyExtractPath"

      # Run Trivy scan
      Write-Host "Running Trivy scan..."
      $trivyExecutable = "$trivyExtractPath\trivy.exe"
      &$trivyExecutable image --exit-code 1 --severity HIGH,CRITICAL ibtihel2001/nodeproject:$(Build.BuildId)

      if ($LASTEXITCODE -ne 0) {
          Write-Host "Vulnerabilities detected. Failing the pipeline."
          exit 1
      } else {
          Write-Host "No critical vulnerabilities detected."
      }


# authenticate Snyk (Replace with your Snyk API Token)
- script: |
    snyk auth 8be4abeb-83d5-4e17-acb6-85ef62f8c7d8
  displayName: 'Authenticate Snyk'

# Step 5: Scan Docker Image with Snyk
#- task: CmdLine@2
#  displayName: 'Scan Docker Image for Vulnerabilities with Snyk'
#  inputs:
#    script: |
#      snyk container test $(REPO_NAME):$(IMAGE_TAG)


# Step 12: Push package to Azure Artifacts
- task: npmAuthenticate@0
  inputs:
    workingFile: ./ArtMarket/.npmrc
  displayName: 'Authenticate to Azure Artifacts'

#step 13: Push package to Azure Artifacts
- task: Npm@1
  inputs:
    workingDir: './ArtMarket'
    command: 'publish'
    publishRegistry: 'useFeed'
    publishFeed: '22abed3e-a7dd-43a5-9b98-52ef5521bbcb/3d91f424-c466-461c-80b0-9a360d82c0cf'
  displayName: 'Push package to Azure Artifacts'
